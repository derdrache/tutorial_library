[gd_scene load_steps=19 format=3 uid="uid://cyapaneq30ail"]

[ext_resource type="PackedScene" uid="uid://cal53gbed2hrs" path="res://collection/world_environment.tscn" id="1_u3cyc"]
[ext_resource type="Texture2D" uid="uid://2p6a0hw0jqgg" path="res://assets/prototype/Dark/texture_01.png" id="2_m7jmp"]
[ext_resource type="Texture2D" uid="uid://dihcw4uqc43n1" path="res://assets/prototype/Green/texture_01.png" id="3_y2354"]
[ext_resource type="PackedScene" uid="uid://bgk58udgggg7n" path="res://collection/hit_and_hurt_box/tree.tscn" id="4_ni31j"]
[ext_resource type="PackedScene" uid="uid://doou3mmfc6rh" path="res://fishing_rod/player.tscn" id="6_y2354"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_ni31j"]
albedo_texture = ExtResource("2_m7jmp")
uv1_scale = Vector3(10, 10, 10)

[sub_resource type="PlaneMesh" id="PlaneMesh_nxogm"]
size = Vector2(20, 20)

[sub_resource type="ConvexPolygonShape3D" id="ConvexPolygonShape3D_3253y"]
points = PackedVector3Array(-100, 0, -100, -100, 0, 100, 100, 0, -100, 100, 0, 100)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_xlvrw"]
albedo_texture = ExtResource("3_y2354")
uv1_scale = Vector3(10, 10, 10)

[sub_resource type="BoxMesh" id="BoxMesh_m7jmp"]
size = Vector3(10, 10, 10)

[sub_resource type="ConvexPolygonShape3D" id="ConvexPolygonShape3D_y2354"]
points = PackedVector3Array(5, 5, 5, 5, 5, -5, -5, 5, 5, 5, -5, 5, 5, -5, -5, -5, 5, -5, -5, -5, 5, -5, -5, -5)

[sub_resource type="Shader" id="Shader_y2354"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_refraction : filter_linear_mipmap, repeat_enable;
uniform float refraction : hint_range(-1.0, 1.0, 0.001);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;
uniform sampler2D depth_texture : hint_depth_texture, repeat_disable, filter_nearest;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy + TIME * 0.02;
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = texture(texture_normal, base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Refraction: Enabled (with normal map texture)
	vec3 unpacked_normal = NORMAL_MAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize(mix(
			NORMAL,
			TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,
			NORMAL_MAP_DEPTH));
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(texture(texture_refraction, base_uv), refraction_texture_channel) * refraction;

	float ref_amount = 1.0 - albedo.a * albedo_tex.a;

	float refraction_depth_tex = textureLod(depth_texture, ref_ofs, 0.0).r;
	vec4 refraction_view_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, refraction_depth_tex, 1.0);
	refraction_view_pos.xyz /= refraction_view_pos.w;

	// If the depth buffer is lower then the model's Z position, use the refracted UV, otherwise use the normal screen UV.
	// At low depth differences, decrease refraction intensity to avoid sudden discontinuities.
	EMISSION += textureLod(screen_texture, mix(SCREEN_UV, ref_ofs, smoothstep(0.0, 1.0, VERTEX.z - refraction_view_pos.z)), ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	// Force transparency on the material (required for refraction).
	ALPHA = 1.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_yya60"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_qmxom"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_yya60")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_5tsly"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_yya60")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ni31j"]
render_priority = 0
shader = SubResource("Shader_y2354")
shader_parameter/albedo = Color(0.337255, 0.611765, 1, 0.694118)
shader_parameter/albedo_texture_size = Vector2i(0, 0)
shader_parameter/point_size = 0.1
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/texture_refraction = SubResource("NoiseTexture2D_5tsly")
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/texture_normal = SubResource("NoiseTexture2D_qmxom")
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="BoxMesh" id="BoxMesh_y2354"]
material = SubResource("ShaderMaterial_ni31j")
size = Vector3(20, 20, 20)

[sub_resource type="BoxShape3D" id="BoxShape3D_y2354"]
size = Vector3(20, 20, 20)

[node name="Scene" type="Node3D"]

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866023, -0.433016, 0.250001, 0, 0.499998, 0.866027, -0.500003, 0.749999, -0.43301, 0, 0, 0)
shadow_enabled = true

[node name="WorldEnvironment" parent="." instance=ExtResource("1_u3cyc")]

[node name="Floor" type="MeshInstance3D" parent="."]
visible = false
material_override = SubResource("StandardMaterial3D_ni31j")
mesh = SubResource("PlaneMesh_nxogm")

[node name="StaticBody3D" type="StaticBody3D" parent="Floor"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Floor/StaticBody3D"]
shape = SubResource("ConvexPolygonShape3D_3253y")

[node name="Floor2" type="MeshInstance3D" parent="."]
material_override = SubResource("StandardMaterial3D_ni31j")
mesh = SubResource("PlaneMesh_nxogm")

[node name="StaticBody3D" type="StaticBody3D" parent="Floor2"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Floor2/StaticBody3D"]
shape = SubResource("ConvexPolygonShape3D_3253y")

[node name="Block" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 40, 1.5, 0)
visible = false
material_override = SubResource("StandardMaterial3D_xlvrw")
mesh = SubResource("BoxMesh_m7jmp")

[node name="StaticBody3D" type="StaticBody3D" parent="Block"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Block/StaticBody3D"]
shape = SubResource("ConvexPolygonShape3D_y2354")

[node name="Tree" parent="." instance=ExtResource("4_ni31j")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 13.5)
visible = false

[node name="StaticBody3D2" type="StaticBody3D" parent="."]

[node name="Water" type="MeshInstance3D" parent="StaticBody3D2"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 20, -10, 0)
mesh = SubResource("BoxMesh_y2354")
skeleton = NodePath("../..")

[node name="CollisionShape3D" type="CollisionShape3D" parent="StaticBody3D2"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 20, -10, 0)
shape = SubResource("BoxShape3D_y2354")

[node name="CharacterBody3D" parent="." instance=ExtResource("6_y2354")]
